# -*- coding: utf-8 -*-
"""iot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/130YczEBtIsTOucolL7Ff71aKWDi6Y1qR
"""



import streamlit as st
import paho.mqtt.client as mqtt
import threading
import time
import joblib
import numpy as np

# Load trained model and label encoder
model = joblib.load("distance_model.pkl")
le = joblib.load("label_encoder.pkl")

# Global variables to store latest data
latest_distance = "Waiting..."
latest_status = "Waiting..."

# MQTT callback
def on_connect(client, userdata, flags, rc, properties=None):
    print("✅ Connected to broker")
    client.subscribe("iot/distance")

def on_message(client, userdata, msg):
    global latest_distance, latest_status
    try:
        distance = float(msg.payload.decode())
        latest_distance = f"{distance:.2f} cm"

        # ML Prediction
        pred = model.predict([[distance]])
        status = le.inverse_transform(pred)[0]
        latest_status = status

        print(f"📡 {latest_distance} → {latest_status}")
    except:
        latest_distance = "Error"
        latest_status = "⚠ Invalid"

# Start MQTT in background thread
def mqtt_thread():
    client = mqtt.Client(client_id="streamlit_mqtt", callback_api_version=mqtt.CallbackAPIVersion.VERSION2)
    client.on_connect = on_connect
    client.on_message = on_message
    client.connect("broker.hivemq.com", 1883, 60)
    client.loop_forever()

threading.Thread(target=mqtt_thread, daemon=True).start()

# Streamlit UI
st.set_page_config(page_title="Real-Time Distance Monitor", layout="centered")
st.title("📡 Real-Time ML-Powered Distance Monitor")

dist_placeholder = st.empty()
stat_placeholder = st.empty()

# Auto refresh UI every second
while True:
    dist_placeholder.text(f"📏 Distance: {latest_distance}")
    stat_placeholder.text(f"🧠 Status: {latest_status}")
    time.sleep(10)

